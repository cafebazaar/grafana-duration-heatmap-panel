{"version":3,"sources":["../src/duration_heatmap_ctrl.js"],"names":["MetricsPanelCtrl","TimeSeries","_","rendering","DurationHeatMapCtrl","$scope","$injector","panelDefaults","num_of_slices","number_of_legend","min_frq","max_frq","POSITIVE_INFINITY","max_bin","min_bin","intPanelConfigs","defaults","panel","parseConfigs","events","on","onRender","bind","onDataReceived","onDataError","onInitEditMode","index","key","parseInt","addEditorTab","series","render","data","parseSeries","dataList","map","seriesHandler","filter","d","min_unixtime","Math","min","apply","s","max_unixtime","max","slice_length","all_buckets","series_data","bucketed_datapoints","datapoints","val","floor","ready_to_reduce_bucketed_datapoints","concat","datum","reduce","reduced","element","value","count","push","bucket","alias","sort","a","b","series_array","bucket_obj","bucket_index","indexOf","bin","date","Date","parseFloat","min_date","max_date","seriesData","target_parts","target","split","length","isNaN","scope","elem","attrs","ctrl","templateUrl"],"mappings":"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","file":"duration_heatmap_ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport TimeSeries from 'app/core/time_series';\nimport _ from 'lodash';\n\nimport rendering from './rendering';\n\nexport class DurationHeatMapCtrl extends MetricsPanelCtrl {\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    // Panel Initial configurations\n    var panelDefaults = {\n      num_of_slices: 140,\n      number_of_legend: 10,\n      min_frq: 0,\n      max_frq: 3000,\n      POSITIVE_INFINITY: 100000000,\n      max_bin: 1000,\n      min_bin: 0\n    }\n\n    this.intPanelConfigs = [\"num_of_slices\", \"number_of_legend\", \"min_frq\", \"max_frq\", \"POSITIVE_INFINITY\", \"max_bin\", \"min_bin\"];\n\n    _.defaults(this.panel, panelDefaults);\n\n    this.parseConfigs();\n\n    this.events.on('render', this.onRender.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n  }\n\n  parseConfigs() {\n    for (var index in this.intPanelConfigs) {\n      var key = this.intPanelConfigs[index];\n      this.panel[key] = parseInt(this.panel[key]);\n    }\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/plugins/cafebazaar-duration-heatmap-panel/editor.html', 2);\n  }\n\n  onDataError() {\n    this.series = [];\n    this.render();\n  }\n\n  onRender() {\n    this.parseConfigs();\n    this.data = this.parseSeries(this.series);\n  }\n\n  onDataReceived(dataList) {\n    this.series = dataList.map(this.seriesHandler.bind(this));\n    this.series = this.series.filter(d => d != null)\n    this.data = this.parseSeries(this.series);\n\n    this.render(this.data);\n  }\n\n  parseSeries(series) {\n    let min_unixtime = Math.min.apply(Math, series.map(s => s.min));\n    let max_unixtime = Math.min.apply(Math, series.map(s => s.max));\n    let slice_length = (max_unixtime-min_unixtime) / this.panel.num_of_slices;\n\n    var all_buckets = [];\n\n    var series_data = series.map(function(s) {\n      let bucketed_datapoints = s.datapoints.map(val => [val[0], (Math.floor((val[1]-min_unixtime)/slice_length)*slice_length)+min_unixtime]);\n\n\n      let ready_to_reduce_bucketed_datapoints = [{}].concat(bucketed_datapoints);\n\n      let datum = ready_to_reduce_bucketed_datapoints.reduce((reduced, element) => {\n        let key = element[1];\n        let value = element[0];\n\n        if(key in reduced) {\n          reduced[key][\"value\"] += value;\n          reduced[key][\"count\"] += 1;\n        }\n        else {\n          reduced[key] = {value: value, count: 1};\n        }\n\n        return reduced;\n      });\n\n      all_buckets.push(parseInt(s.bucket));\n\n      return {\n        bucket: s.bucket,\n        alias: s.alias,\n        data: datum\n      };\n    });\n\n    // Sorting all_buckets so we can use it to index our buckets\n    all_buckets.sort((a, b) => parseInt(a)-parseInt(b));\n\n    // Flatning the structure, we want an array of (date_time_obj, bucket_index, value)\n    var series_array = [];\n    series_data.map(function(bucket_obj) {\n      let bucket_index = all_buckets.indexOf(bucket_obj.bucket);\n\n      for(var key in bucket_obj.data) {\n        series_array.push({bin: bucket_index, date: new Date(parseFloat(key)), value: bucket_obj.data[key][\"value\"]/bucket_obj.data[key][\"count\"]});\n      }\n    });\n\n    var data = {};\n    data.series_data = series_data;\n    data.min_date = new Date(min_unixtime);\n    data.max_date = new Date(max_unixtime);\n    data.all_buckets = all_buckets;\n    data.series_array = series_array;\n\n    return data\n  }\n\n  seriesHandler(seriesData) {\n    let datapoints = seriesData.datapoints;\n\n    // This part is specific to statsD way of naming metrics (using '.' as seperator)\n    // More importantly it specificly use statsD notation of naming values of a histogram (bin_<upper limit>).\n    let target_parts = seriesData.target.split(\".\");\n    let alias = target_parts[target_parts.length - 1].split(\"_\")[1];\n\n    var series = new TimeSeries({\n      datapoints: datapoints,\n      alias: alias\n    });\n\n    series.bucket = parseInt(alias);\n    // NaN (which is a result of converting \"Inf\" to int) will break sorting process, wo we'll replace it with a huge number.\n    // We can't use Number.POSITIVE_INFINITY because it will break sorting process too!\n    if(isNaN(series.bucket)) {\n      series.bucket = this.panel.POSITIVE_INFINITY;\n    }\n\n    series.min = datapoints[0][1];\n    series.max = datapoints[datapoints.length - 1][1];\n\n    // Do not inculde bins larger than max bin and smaller than min bin\n    if((series.bucket <= this.panel.max_bin) && (series.bucket >= this.panel.min_bin)) {\n      return series;\n    }\n    else\n    {\n      return null;\n    }\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    rendering(scope, elem, attrs, ctrl);\n  }  \n}\n\nDurationHeatMapCtrl.templateUrl = 'module.html';"]}